name: Build DEB Package

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          devscripts \
          dh-make \
          debhelper \
          fakeroot \
          python3-all \
          python3-stdeb \
          dh-python

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel

    - name: Prepare package structure
      run: |
        # Erstelle Source Distribution
        python setup.py sdist

        # Erstelle deb_dist Verzeichnis
        mkdir -p deb_dist

        # Entpacke Source-Paket
        tar -xvf dist/*.tar.gz -C deb_dist/

    - name: Build DEB package
      run: |
        cd deb_dist/container-manager-*
        
        # Initialisiere Debian Packaging
        dh_make --python --createorig -y -p container-manager_0.1.0
        
        # Erstelle README.Debian
        echo "container-manager for Debian" > debian/README.Debian
        echo "---------------------------" >> debian/README.Debian
        echo "" >> debian/README.Debian
        echo "This package provides a CLI tool to manage Docker containers interactively." >> debian/README.Debian
        echo "" >> debian/README.Debian
        echo "-- Maintainer Name <maintainer@example.com>  $(date -R)" >> debian/README.Debian
        
        # Baue das Debian-Paket
        dpkg-buildpackage -rfakeroot -uc -us

    - name: Upload DEB artifact
      uses: actions/upload-artifact@v4
      with:
        name: container-manager.deb
        path: deb_dist/*.deb